      - name: Compute band + send to Discord
        run: |
          python - << 'PY'
          import os, sys, datetime as dt
          import numpy as np
          import pandas as pd
          import yfinance as yf
          import requests
          from pytz import timezone, UTC

          WEBHOOK = os.environ.get("DISCORD_WEBHOOK")
          if not WEBHOOK:
            print("Missing DISCORD_WEBHOOK secret", file=sys.stderr); sys.exit(1)

          tz = timezone("America/Toronto")
          now_local = dt.datetime.now(tz)
          today_str = now_local.date().isoformat()

          # --- Fetch daily data (enough for 200-day SMA) ---
          df = yf.download("SPY", period="600d", interval="1d", auto_adjust=False, progress=False)
          if df is None or df.empty:
            requests.post(WEBHOOK, json={"content": f"SPY band alert: data empty | Date {today_str}"})
            sys.exit(0)

          # Some yfinance versions return a MultiIndex on columns; flatten it.
          if isinstance(df.columns, pd.MultiIndex):
            df.columns = [" ".join([c for c in tup if c]).strip() for tup in df.columns.to_flat_index()]

          # Normalize column casing just in case
          colmap = {c: c.strip().title() for c in df.columns}
          df.rename(columns=colmap, inplace=True)

          if "Open" not in df.columns:
            requests.post(WEBHOOK, json={"content": f"SPY band alert: 'Open' column missing. Got: {list(df.columns)}"})
            sys.exit(0)

          # Index tz handling
          if df.index.tz is None:
            df.index = pd.to_datetime(df.index).tz_localize(UTC)
          else:
            df.index = pd.to_datetime(df.index).tz_convert(UTC)
          df = df.tz_convert(tz)
          df["date"] = df.index.date

          # --- 200-DMA on OPEN ---
          df["SMA200o"] = pd.Series(df["Open"]).rolling(200, min_periods=200).mean()

          # We require rows where SMA is defined
          if "SMA200o" not in df.columns:
            requests.post(WEBHOOK, json={"content": f"SPY band alert: SMA column not created"})
            sys.exit(0)

          valid = df.dropna(subset=["SMA200o"])
          if valid.empty:
            requests.post(WEBHOOK, json={"content": f"SPY band alert: not enough history for 200-DMA | Date {today_str}"})
            sys.exit(0)

          # Latest row (today or last trading day)
          row_t = valid.iloc[-1]
          # Prior trading day w/ SMA
          if len(valid) < 2:
            requests.post(WEBHOOK, json={"content": f"SPY band alert: insufficient history for prior state | Date {today_str}"})
            sys.exit(0)
          row_y = valid.iloc[-2]

          def band_state(open_px, sma):
            if open_px > sma * 1.03: return "LONG"
            if open_px < sma * 0.97: return "CASH"
            return "NEUTRAL"

          open_t = float(row_t["Open"])
          sma_t  = float(row_t["SMA200o"])
          open_y = float(row_y["Open"])
          sma_y  = float(row_y["SMA200o"])

          state_t = band_state(open_t, sma_t)
          state_y = band_state(open_y, sma_y)

          if state_t == "LONG" and state_y in ("CASH","NEUTRAL"):
            action = "BUY"
          elif state_t == "CASH" and state_y in ("LONG","NEUTRAL"):
            action = "SELL"
          else:
            action = "HOLD"

          diff_pct = (open_t / sma_t - 1.0) * 100.0

          suffix = ""
          if row_t["date"] != now_local.date():
            suffix = " (prev day)"

          message = (
            f"SPY 09:30 Open ${open_t:,.2f} | 200DMAo ${sma_t:,.2f} | Î” {diff_pct:+.2f}% | "
            f"Band: {state_t} | {action} | {row_t['date']}{suffix}"
          )

          r = requests.post(WEBHOOK, json={"content": message}, timeout=20)
          r.raise_for_status()
          print("Sent:", message)
          PY
